// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// models
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String
  role          UserRole?
  events        Event[]       @relation("OrganizerEvents")
  tickets       Ticket[]      @relation("UserTickets")
  reviews       Review[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Transaction   Transaction[]
  Payout        Payout[]

  @@map("user")
}

model Event {
  id                String    @id @default(cuid())
  title             String
  type              EventType
  description       String
  detailDescription String
  location          String
  seat              Int
  price             Int
  date              DateTime // Stores the full date with time
  time              String
  caste             Caste[]
  organizer         User      @relation("OrganizerEvents", fields: [organizerId], references: [id])
  organizerId       String
  ticketTypes       Ticket[]  @relation("EventTickets")
  reviews           Review[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Ticket {
  id            String       @id @default(cuid())
  price         Float
  status        TicketStatus @default(AVAILABLE)
  qrCode        String?
  event         Event        @relation("EventTickets", fields: [eventId], references: [id])
  eventId       String
  user          User?        @relation("UserTickets", fields: [userId], references: [id])
  userId        String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId String?
}

model Transaction {
  id            String            @id @default(cuid())
  paymentId     String  // Razorpay payment ID for tracking
  orderId       String  // Razorpay order ID for payment linking
  signature     String  // Razorpay signature for security validation
  amount        Float   // Total amount paid
  currency      String            @default("INR") // Currency of the transaction
  status        TransactionStatus @default(PENDING)
  user          User              @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  tickets Ticket[]
  Payout  Payout[]
}

model Payout {
  id            String      @id @default(cuid())
  organizer     User        @relation(fields: [organizerId], references: [id])
  organizerId   String
  amount        Float // Payout amount to the organizer
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String // Transaction linked to the payout
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  feedback  String?
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Caste {
  id          String   @id @default(cuid())
  image       String
  performName String
  occupation  String
  Event       Event?   @relation(fields: [eventId], references: [id])
  eventId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// user roles
enum UserRole {
  ORGANIZER
  ATTENDEE
  ADMIN
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

// ticket status
enum TicketStatus {
  AVAILABLE
  SOLD
  CANCELLED
}

// event type
enum EventType {
  MUSIC
  CONCERT
  ART
  CULTURE
  HACKATHON
  SEMINAR
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// models
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model User {
  id            String @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password  String
  role      UserRole?
  events    Event[]  @relation("OrganizerEvents")
  tickets   Ticket[] @relation("UserTickets")
  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Payout    Payout[]
}

model Event {
  id          String @id @default(cuid())
  title       String
  description String
  location    String
  date        DateTime
  organizer   User     @relation("OrganizerEvents", fields: [organizerId], references: [id])
  organizerId String
  ticketTypes Ticket[] @relation("EventTickets")
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Ticket {
  id            String @id @default(cuid())
  type          String
  price         Float
  status        TicketStatus @default(AVAILABLE)
  qrCode        String
  event         Event        @relation("EventTickets", fields: [eventId], references: [id])
  eventId       String
  user          User?        @relation("UserTickets", fields: [userId], references: [id])
  userId        String?
  transaction   Transaction  @relation(fields: [transactionId], references: [id])
  transactionId String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Transaction {
  id             String @id @default(cuid())
  paymentDetails String
  stripeInfo     String
  ticket         Ticket[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Payout         Payout[]
}

model Payout {
  id            String @id @default(cuid())
  organizer     User        @relation(fields: [organizerId], references: [id])
  organizerId   String
  amount        Float
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Review {
  id        String @id @default(cuid())
  rating    Int
  feedback  String?
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// user roles
enum UserRole {
  ORGANIZER
  ATTENDEE
  ADMIN
}

// ticket status
enum TicketStatus {
  AVAILABLE
  SOLD
  CANCELLED
}
